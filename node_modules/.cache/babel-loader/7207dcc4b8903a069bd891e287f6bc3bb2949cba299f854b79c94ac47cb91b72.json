{"ast":null,"code":"var _jsxFileName = \"/Users/claudia/Documents/React/myway/src/components/pages/home/Home.jsx\",\n  _s = $RefreshSig$();\nimport Topbar from \"../../topbar/Topbar\";\nimport CreateHabit from \"../createHabit/CreateHabit\";\nimport \"./home.css\";\nimport { useState } from 'react';\nimport { getMonthNames, getCurrentWeekDates } from '../../../utils/dateHelpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [showCreateHabit, setShowCreateHabit] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const handleCreateHabitClose = () => {\n    setShowCreateHabit(false);\n  };\n  const handleCreateHabitOpen = () => {\n    setShowCreateHabit(true);\n  };\n  const handleSettingsOpen = () => {\n    setShowSettings(true);\n  };\n  const handleSettingsClose = () => {\n    setShowSettings(false);\n  };\n  const habits = [{\n    id: 1,\n    name: 'Read a book'\n  }, {\n    id: 2,\n    name: 'Exercise'\n  }, {\n    id: 3,\n    name: 'Meditate'\n  }];\n\n  // Calculate the current month and date\n  // Get the current month name\n  const m_names = getMonthNames();\n  const {\n    curMonth,\n    weekDays,\n    weekDates\n  } = getCurrentWeekDates();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage\",\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {\n      onAddClick: handleCreateHabitOpen,\n      onSettingsClick: handleSettingsOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contentContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendarHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emptyCell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"monthRow\",\n          style: {\n            gridColumn: '2 / -1'\n          },\n          children: m_names[curMonth]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"daysRow\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emptyCell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), weekDays.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendarDay\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dayName\",\n            children: day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this), day !== 'This Week' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dayDate\",\n            children: weekDates[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 23\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 19\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"habitsGrid\",\n        children: habits.map(habit => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"habitRow\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"habitName\",\n            children: habit.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }, this), weekDays.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkboxCell\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 25\n            }, this)\n          }, `${habit.id}-${day}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 23\n          }, this))]\n        }, habit.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), showCreateHabit && /*#__PURE__*/_jsxDEV(CreateHabit, {\n      onClose: handleCreateHabitClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"uUqkqs4JLGLo2ZcDjOEg9qHJjaQ=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["Topbar","CreateHabit","useState","getMonthNames","getCurrentWeekDates","jsxDEV","_jsxDEV","Home","_s","showCreateHabit","setShowCreateHabit","showSettings","setShowSettings","handleCreateHabitClose","handleCreateHabitOpen","handleSettingsOpen","handleSettingsClose","habits","id","name","m_names","curMonth","weekDays","weekDates","className","children","onAddClick","onSettingsClick","fileName","_jsxFileName","lineNumber","columnNumber","style","gridColumn","map","day","index","habit","onClose","_c","$RefreshReg$"],"sources":["/Users/claudia/Documents/React/myway/src/components/pages/home/Home.jsx"],"sourcesContent":["import Topbar from \"../../topbar/Topbar\";\nimport CreateHabit from \"../createHabit/CreateHabit\";\nimport \"./home.css\"\nimport { useState } from 'react';\nimport { getMonthNames, getCurrentWeekDates } from '../../../utils/dateHelpers';\n\nexport default function Home() {\n    const [showCreateHabit, setShowCreateHabit] = useState(false);\n    const [showSettings, setShowSettings] = useState(false);\n\n    const handleCreateHabitClose = () => {\n        setShowCreateHabit(false);\n    };\n\n    const handleCreateHabitOpen = () => {\n        setShowCreateHabit(true);\n    };\n\n    const handleSettingsOpen = () => {\n        setShowSettings(true);\n    };\n\n    const handleSettingsClose = () => {\n        setShowSettings(false);\n    };\n\n    const habits = [\n        { id: 1, name: 'Read a book' },\n        { id: 2, name: 'Exercise' },\n        { id: 3, name: 'Meditate' },\n    ];\n\n    // Calculate the current month and date\n    // Get the current month name\n    const m_names = getMonthNames();\n    const { curMonth, weekDays, weekDates } = getCurrentWeekDates();\n\n    return (\n        <div className=\"homepage\">\n            <Topbar onAddClick={handleCreateHabitOpen} onSettingsClick={handleSettingsOpen} />\n            <div className=\"contentContainer\">\n              <div className=\"calendarHeader\">\n                <div className=\"emptyCell\"></div>\n                <div className=\"monthRow\" style={{ gridColumn: '2 / -1' }}>\n                  {m_names[curMonth]}\n                </div>\n              </div>\n              <div className=\"daysRow\">\n                <div className=\"emptyCell\"></div>\n                {weekDays.map((day, index) => (\n                  <div key={day} className=\"calendarDay\">\n                    <div className=\"dayName\">{day}</div>\n                    {day !== 'This Week' && (\n                      <div className=\"dayDate\">{weekDates[index]}</div>\n                    )}\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"habitsGrid\">\n                {habits.map(habit => (\n                  <div key={habit.id} className=\"habitRow\">\n                    <div className=\"habitName\">{habit.name}</div>\n                    {weekDays.map(day => (\n                      <div key={`${habit.id}-${day}`} className=\"checkboxCell\">\n                        <div className=\"checkbox\"/>\n                      </div>\n                    ))}\n                  </div>\n                ))}\n              </div>\n            </div>\n            {showCreateHabit && <CreateHabit onClose={handleCreateHabitClose} />}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}