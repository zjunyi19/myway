{"ast":null,"code":"var _jsxFileName = \"/Users/claudia/Documents/React/myway/src/components/pages/home/Home.jsx\",\n  _s = $RefreshSig$();\nimport Topbar from \"../../topbar/Topbar\";\nimport CreateHabit from \"../createHabit/CreateHabit\";\nimport \"./home.css\";\nimport { useState } from 'react';\nimport { getMonthNames, getCurrentWeekDates } from '../../../utils/dateHelpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [showCreateHabit, setShowCreateHabit] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const handleCreateHabitClose = () => {\n    setShowCreateHabit(false);\n  };\n  const handleCreateHabitOpen = () => {\n    setShowCreateHabit(true);\n  };\n  const handleSettingsOpen = () => {\n    setShowSettings(true);\n  };\n  const handleSettingsClose = () => {\n    setShowSettings(false);\n  };\n  const habits = [{\n    id: 1,\n    name: 'Read a book'\n  }, {\n    id: 2,\n    name: 'Exercise'\n  }, {\n    id: 3,\n    name: 'Meditate'\n  }];\n\n  // Calculate the current month and date\n  // Get the current month name\n  const m_names = getMonthNames();\n  const {\n    curMonth,\n    weekDays,\n    weekDates\n  } = getCurrentWeekDates();\n\n  // 在组件内添加状态\n  const [checkStates, setCheckStates] = useState({});\n  const getNextState = currentState => {\n    const states = ['empty', 'quarter', 'half', 'full'];\n    const currentIndex = states.indexOf(currentState || 'empty');\n    return states[(currentIndex + 1) % states.length];\n  };\n  const handleCheckClick = (habitId, day) => {\n    const key = `${habitId}-${day}`;\n    setCheckStates(prev => ({\n      ...prev,\n      [key]: getNextState(prev[key])\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage\",\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {\n      onAddClick: handleCreateHabitOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contentContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendarHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emptyCell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"monthRow\",\n          style: {\n            gridColumn: '2 / -1'\n          },\n          children: m_names[curMonth]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"daysRow\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emptyCell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this), weekDays.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendarDay\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dayName\",\n            children: day\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this), day !== 'This Week' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dayDate\",\n            children: weekDates[index]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 23\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 19\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"habitsGrid\",\n        children: habits.map(habit => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"habitRow\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"habitName\",\n            children: habit.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this), weekDays.map(day => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkboxCell\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `checkbox ${checkStates[`${habit.id}-${day}`] || 'empty'}`,\n              onClick: () => handleCheckClick(habit.id, day)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 25\n            }, this)\n          }, `${habit.id}-${day}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 23\n          }, this))]\n        }, habit.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), showCreateHabit && /*#__PURE__*/_jsxDEV(CreateHabit, {\n      onClose: handleCreateHabitClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"ARnxIiQDSxY3t9FP01VqXXd7E8k=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["Topbar","CreateHabit","useState","getMonthNames","getCurrentWeekDates","jsxDEV","_jsxDEV","Home","_s","showCreateHabit","setShowCreateHabit","showSettings","setShowSettings","handleCreateHabitClose","handleCreateHabitOpen","handleSettingsOpen","handleSettingsClose","habits","id","name","m_names","curMonth","weekDays","weekDates","checkStates","setCheckStates","getNextState","currentState","states","currentIndex","indexOf","length","handleCheckClick","habitId","day","key","prev","className","children","onAddClick","fileName","_jsxFileName","lineNumber","columnNumber","style","gridColumn","map","index","habit","onClick","onClose","_c","$RefreshReg$"],"sources":["/Users/claudia/Documents/React/myway/src/components/pages/home/Home.jsx"],"sourcesContent":["import Topbar from \"../../topbar/Topbar\";\nimport CreateHabit from \"../createHabit/CreateHabit\";\nimport \"./home.css\"\nimport { useState } from 'react';\nimport { getMonthNames, getCurrentWeekDates } from '../../../utils/dateHelpers';\n\nexport default function Home() {\n    const [showCreateHabit, setShowCreateHabit] = useState(false);\n    const [showSettings, setShowSettings] = useState(false);\n\n    const handleCreateHabitClose = () => {\n        setShowCreateHabit(false);\n    };\n\n    const handleCreateHabitOpen = () => {\n        setShowCreateHabit(true);\n    };\n\n    const handleSettingsOpen = () => {\n        setShowSettings(true);\n    };\n\n    const handleSettingsClose = () => {\n        setShowSettings(false);\n    };\n\n    const habits = [\n        { id: 1, name: 'Read a book' },\n        { id: 2, name: 'Exercise' },\n        { id: 3, name: 'Meditate' },\n    ];\n\n    // Calculate the current month and date\n    // Get the current month name\n    const m_names = getMonthNames();\n    const { curMonth, weekDays, weekDates } = getCurrentWeekDates();\n\n    // 在组件内添加状态\n    const [checkStates, setCheckStates] = useState({});\n\n    const getNextState = (currentState) => {\n        const states = ['empty', 'quarter', 'half', 'full'];\n        const currentIndex = states.indexOf(currentState || 'empty');\n        return states[(currentIndex + 1) % states.length];\n    };\n\n    const handleCheckClick = (habitId, day) => {\n        const key = `${habitId}-${day}`;\n        setCheckStates(prev => ({\n            ...prev,\n            [key]: getNextState(prev[key])\n        }));\n    };\n\n    return (\n        <div className=\"homepage\">\n            <Topbar onAddClick={handleCreateHabitOpen} />\n            <div className=\"contentContainer\">\n              <div className=\"calendarHeader\">\n                <div className=\"emptyCell\"></div>\n                <div className=\"monthRow\" style={{ gridColumn: '2 / -1' }}>\n                  {m_names[curMonth]}\n                </div>\n              </div>\n              <div className=\"daysRow\">\n                <div className=\"emptyCell\"></div>\n                {weekDays.map((day, index) => (\n                  <div key={day} className=\"calendarDay\">\n                    <div className=\"dayName\">{day}</div>\n                    {day !== 'This Week' && (\n                      <div className=\"dayDate\">{weekDates[index]}</div>\n                    )}\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"habitsGrid\">\n                {habits.map(habit => (\n                  <div key={habit.id} className=\"habitRow\">\n                    <div className=\"habitName\">{habit.name}</div>\n                    {weekDays.map(day => (\n                      <div key={`${habit.id}-${day}`} className=\"checkboxCell\">\n                        <div \n                          className={`checkbox ${checkStates[`${habit.id}-${day}`] || 'empty'}`}\n                          onClick={() => handleCheckClick(habit.id, day)}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                ))}\n              </div>\n            </div>\n            {showCreateHabit && <CreateHabit onClose={handleCreateHabitClose} />}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}