{"ast":null,"code":"import { auth } from \"./firebase\";\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\nconst validatePassword = password => {\n  if (password.length < 6) {\n    return \"Password must be at least 6 characters\";\n  }\n  if (!/\\d/.test(password)) {\n    return \"Password must contain at least one number\";\n  }\n  if (!/[A-Z]/.test(password)) {\n    return \"Password must contain at least one uppercase letter\";\n  }\n  if (!/[a-z]/.test(password)) {\n    return \"Password must contain at least one lowercase letter\";\n  }\n  return \"\";\n};\nexport const doCreateUserWithEmailAndPassword = async (email, password) => {\n  // Test if email and password are filled\n  if (!email || !password) {\n    setError(\"Please fill in all fields\");\n    return;\n  }\n  // Test if password is complex enough\n  const passwordError = validatePassword(password);\n  if (passwordError) {\n    setError(passwordError);\n    return;\n  }\n  try {\n    await createUserWithEmailAndPassword(auth, email, password);\n    navigate(\"/\");\n  } catch (error) {\n    switch (error.code) {\n      case 'auth/email-already-in-use':\n        setError(\"Email already exists\");\n        break;\n      case 'auth/invalid-email':\n        setError(\"Invalid email format\");\n        break;\n      default:\n        setError(\"Registration failed. Please try again.\");\n    }\n  }\n};","map":{"version":3,"names":["auth","createUserWithEmailAndPassword","validatePassword","password","length","test","doCreateUserWithEmailAndPassword","email","setError","passwordError","navigate","error","code"],"sources":["/Users/claudia/Documents/React/myway/src/firebase/auth.js"],"sourcesContent":["import { auth } from \"./firebase\";\nimport { createUserWithEmailAndPassword } from \"firebase/auth\";\n\nconst validatePassword = (password) => {\n    if (password.length < 6) {\n        return \"Password must be at least 6 characters\";\n    }\n    if (!/\\d/.test(password)) {\n        return \"Password must contain at least one number\";\n    }\n    if (!/[A-Z]/.test(password)) {\n        return \"Password must contain at least one uppercase letter\";\n    }\n    if (!/[a-z]/.test(password)) {\n        return \"Password must contain at least one lowercase letter\";\n    }\n    return \"\";\n};\n\nexport const doCreateUserWithEmailAndPassword = async (email, password) => {\n    // Test if email and password are filled\n    if (!email || !password) {\n        setError(\"Please fill in all fields\");\n        return;\n      }\n      // Test if password is complex enough\n      const passwordError = validatePassword(password);\n      if (passwordError) {\n        setError(passwordError);\n        return;\n      }\n  \n      try {\n        await createUserWithEmailAndPassword(auth, email, password);\n        navigate(\"/\");\n      } catch (error) {\n        switch (error.code) {\n          case 'auth/email-already-in-use':\n            setError(\"Email already exists\");\n            break;\n          case 'auth/invalid-email':\n            setError(\"Invalid email format\");\n            break;\n          default:\n            setError(\"Registration failed. Please try again.\");\n        }\n      }\n}"],"mappings":"AAAA,SAASA,IAAI,QAAQ,YAAY;AACjC,SAASC,8BAA8B,QAAQ,eAAe;AAE9D,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;EACnC,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACrB,OAAO,wCAAwC;EACnD;EACA,IAAI,CAAC,IAAI,CAACC,IAAI,CAACF,QAAQ,CAAC,EAAE;IACtB,OAAO,2CAA2C;EACtD;EACA,IAAI,CAAC,OAAO,CAACE,IAAI,CAACF,QAAQ,CAAC,EAAE;IACzB,OAAO,qDAAqD;EAChE;EACA,IAAI,CAAC,OAAO,CAACE,IAAI,CAACF,QAAQ,CAAC,EAAE;IACzB,OAAO,qDAAqD;EAChE;EACA,OAAO,EAAE;AACb,CAAC;AAED,OAAO,MAAMG,gCAAgC,GAAG,MAAAA,CAAOC,KAAK,EAAEJ,QAAQ,KAAK;EACvE;EACA,IAAI,CAACI,KAAK,IAAI,CAACJ,QAAQ,EAAE;IACrBK,QAAQ,CAAC,2BAA2B,CAAC;IACrC;EACF;EACA;EACA,MAAMC,aAAa,GAAGP,gBAAgB,CAACC,QAAQ,CAAC;EAChD,IAAIM,aAAa,EAAE;IACjBD,QAAQ,CAACC,aAAa,CAAC;IACvB;EACF;EAEA,IAAI;IACF,MAAMR,8BAA8B,CAACD,IAAI,EAAEO,KAAK,EAAEJ,QAAQ,CAAC;IAC3DO,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,QAAQA,KAAK,CAACC,IAAI;MAChB,KAAK,2BAA2B;QAC9BJ,QAAQ,CAAC,sBAAsB,CAAC;QAChC;MACF,KAAK,oBAAoB;QACvBA,QAAQ,CAAC,sBAAsB,CAAC;QAChC;MACF;QACEA,QAAQ,CAAC,wCAAwC,CAAC;IACtD;EACF;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}